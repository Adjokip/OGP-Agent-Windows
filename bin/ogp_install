#!/bin/bash

#
# OGP - Open Game Panel
# Copyright (C) Copyright (C) 2008 - 2013 The OGP Development Team
#
# http://www.opengamepanel.org/
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

agent_home="/OGP"

checkDepends() {
	CURL=`which curl 2>/dev/null`
	if test "$?" -gt 0; then
		echo "FAILURE: Failed to locate curl binary."
		exit 1
	else
		echo "INFO: Located curl: $CURL"
	fi
	UNZIP=`which unzip 2>/dev/null`
	if test "$?" -gt 0; then
		echo "FAILURE: Failed to locate unzip binary."
		exit 1
	else
		echo "INFO: Located unzip: $UNZIP"
	fi
}

checkDepends

REVISION=$(curl -s http://svn.code.sf.net/p/hldstart/code/trunk/ | grep "<h2>" | awk '{print $4}' | tr -d [:punct:])

URLLIN=http://master.dl.sourceforge.net/project/ogpextras/Alternative-Snapshot/linux-agent-${REVISION}.zip
URLWIN=http://master.dl.sourceforge.net/project/ogpextras/Alternative-Snapshot/win-agent-${REVISION}.zip

HEADLIN=$(curl -Os --head -w "%{http_code}" "$URLLIN")
HEADWIN=$(curl -Os --head -w "%{http_code}" "$URLWIN")

if [ "$HEADLIN" == "200" -a "$HEADWIN" == "200" ]; then

	if [ ! -d ${agent_home} ]; then
		mkdir ${agent_home}
	fi
	
	echo "Downloading and installing OGP agent files."
	
	curl -Os $URLLIN
	unzip -q linux-agent-${REVISION}.zip
	cd linux-agent-${REVISION}
	cp -Rf * ${agent_home}/. &> /dev/null
	rm -f ${agent_home}/ogp_agent.pl ${agent_home}/ogp_agent_run &> /dev/null
	cd ..
	
	curl -Os $URLWIN
	unzip -q win-agent-${REVISION}.zip
	cd win-agent-${REVISION}
	cp -f OGP/* ${agent_home}/. &> /dev/null
	chmod +x ${agent_home}/ogp_agent.pl &> /dev/null
	chmod +x ${agent_home}/ogp_agent_run &> /dev/null
	cp -f bin/* /usr/bin/. &> /dev/null
	chmod +x /usr/bin/ogp_agent &> /dev/null
	chmod +x /usr/bin/ogp_install &> /dev/null
	cd ..
	
	echo "Removing temporary files."
	
	rm -Rf win-agent-${REVISION}* linux-agent-${REVISION}* &> /dev/null
else
	echo "Unable to download agent files."
	echo "Try again later by running the command ogp_install."
	exit 1
fi

AE=`perldoc -l Archive::Extract &>/dev/null`
if test "$?" -gt 0; then
	cpan -i Archive::Extract
fi

if [ ! -d ${agent_home}/tmp ]; then
	mkdir ${agent_home}/tmp
fi

# Run the configuration script
chmod +x ${agent_home}/agent_conf.sh
bash ${agent_home}/agent_conf.sh

bashprefsfile=${agent_home}/Cfg/bash_prefs.cfg

readonly DEFAULT_IP=0.0.0.0
readonly DEFAULT_FTP_PORT=21
readonly DEFAULT_FTP_PASV_RANGE=40000:50000

echo;
echo -n "Should Open Game Panel create and manage FTP accounts for panel users (FTP users, permissions, etc)? [yes|no]: "
read manage_ftp
if [ "${manage_ftp}" != "yes" ] && [ "${manage_ftp}" != "no" ]; then
	ogpManagesFTP=1
else
	if [ "${manage_ftp}" == "no" ]; then
		ogpManagesFTP=0
	else
		ogpManagesFTP=1
	fi
fi

echo;
if [ "$ogpManagesFTP" == "1" ]
then
	echo
	echo "Set the listen port for the FTP server. The default should be fine for everyone."
	echo "However, if you want to change it that can be done here, otherwise just press Enter."
	echo -n "Set listen port [Default ${DEFAULT_FTP_PORT}]: "
	read port

	if [ -z "${ftp_port}" ]
	then 
		ftp_port=$DEFAULT_FTP_PORT
	fi

	echo 
	echo "Set the listen IP for the FTP server."
	echo "Default is (${DEFAULT_IP}) to bind on all interfaces."
	echo -n "Set FTP server IP [Default ${DEFAULT_IP}]: "
	read ip

	if [ -z "${ip}" ]  
	then 
		ftp_ip=$DEFAULT_IP
	fi
	
	echo
	echo "Passive-mode downloads."
	echo "This is especially useful if the server is behind a firewall."
	echo -n "Use only ports in the range?(yes|no)[Default no]: "
	read passive_ftp

	if [ -z "${passive_ftp}" -o "${passive_ftp}" != "yes" ]
	then 
		ftp_pasv_range=""
	else
		echo "Enter passive ports range separated by colon (<first port>:<last port>)."
		echo -n "[Default ${DEFAULT_FTP_PASV_RANGE}]: "
		read ftp_pasv_range
		if [ -z "${ftp_pasv_range}" ]
		then 
			ftp_pasv_range=$DEFAULT_FTP_PASV_RANGE
		fi
	fi
else
	ftp_port=$DEFAULT_FTP_PORT
	ftp_ip=$DEFAULT_IP
	ftp_pasv_range=""
fi

echo -e "\nogp_manages_ftp=${ogpManagesFTP}\nftp_port=${ftp_port}\nftp_ip=${ftp_ip}\nftp_pasv_range=${ftp_pasv_range}" >> $bashprefsfile

if [ $? != 0 ]
then
	failed "Failed to write MISC configuration file used by bash scripts."
fi

sed -i "s/version.*/version => 'v${REVISION}',/" ${agent_home}/Cfg/Config.pm

ogp_agent
